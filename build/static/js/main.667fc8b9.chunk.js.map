{"version":3,"sources":["redux/sourceData/const.js","redux/vegaEncoding/const.js","redux/sourceData/actions.js","redux/sourceData/epics.js","redux/sourceData/utils.js","rootEpic.js","configureStore.js","redux/sourceData/reducer.js","containers/WorkingSpace/const.js","containers/WorkingSpace/reducer.js","redux/vegaEncoding/reducer.js","rootReducer.js","containers/Header/index.js","redux/sourceData/selectors.js","DnD.js","components/DnD/DraggableTag/index.js","containers/DataSource/containers/Attributes/components/FieldPopover.js","containers/DataSource/containers/Attributes/components/Attribute.js","containers/DataSource/containers/Attributes/index.js","containers/DataSource/components/DatasetsModal.js","containers/DataSource/containers/AggregateAttributes/index.js","containers/DataSource/index.js","containers/WorkingSpace/actions.js","containers/WorkingSpace/containers/DataTable/index.js","containers/WorkingSpace/selectors.js","redux/vegaEncoding/vegaSpecificationCreator/VegaSpecificationCreator.js","components/VegaCharts/index.js","redux/vegaEncoding/selectors.js","containers/WorkingSpace/containers/Charts/index.js","containers/WorkingSpace/index.js","containers/Footer/index.jsx","components/DnD/DropZone/index.js","containers/ChartConfig/components/Field.js","containers/ChartConfig/components/FieldsColumn.js","containers/ChartConfig/index.js","redux/vegaEncoding/actions.js","containers/MainView/MainView.js","App.js","index.js"],"names":["SET_COLUMNS","SET_RECOMMENDED_DATATYPES_TO_COLUMNS","SET_ROWS","GET_JSON_DATA_REQUEST","SET_ATTRIBUTE_TYPE","FILE_PATHS","name","path","SET_FIELD","ENCODING_FIELDS","MARKS_FIELDS","VEGA_DATA_TYPES","FIELDS_TYPES","AGGREGATE_ATTRIBUTES_TYPES","COUNT","ENCODING_FIELDS_TO_CHANNEL_MAPPING","vl","AVERAGE","setRows","rows","type","datatableEpics","combineEpics","action$","pipe","ofType","switchMap","url","fromFetch","selector","response","json","map","isNil","length","columns","Object","keys","fetchColumnsAndRowsFromJSON","columnsNames","from","catchError","e","console","log","mapTo","rootEpic","configureAppStore","reducer","epicMiddleware","createEpicMiddleware","store","configureStore","middleware","getDefaultMiddleware","concat","run","SOURCE_DATA_REDUCER_NAME","sourceDataReducer","createReducer","currentDatasetPath","attributes","attributesTypes","builder","addCase","state","reduce","acc","mapObjIndexed","_","id","value","defaultTo","Number","isNaN","Date","parse","attributeId","newType","TOGGLE_VIEW","WORKING_SPACE_REDUCER_NAME","workingSpaceReducer","dataTableView","initialState","VEGA_ENCODING_REDUCER_NAME","vegaEncodingReducer","fieldType","fieldId","rootReducer","combineReducers","Header","as","size","sourceDataSelector","currentDatasetPathSelector","createSelector","attributesSelector","rowsSelector","JSON","stringify","attributesTypesSelector","attributesEntries","entries","DnDItemTypes","DraggableTag","tagId","children","icon","color","draggingColor","textColor","itemTypeKey","onDropOutsideDropzone","grow","useDrag","item","collect","monitor","isDragging","end","didDrop","drag","ref","py","px","borderRadius","shadow","borderWidth","bg","flexGrow","spacing","fontSize","defaultProps","FieldPopover","onChange","React","useState","isOpen","setIsOpen","variant","onClose","autoFocus","returnFocusOnClose","getIcon","background","onClick","style","display","align","Attribute","Attributes","useSelector","dispatch","useDispatch","w","h","p","textAlign","datatype","newDatatype","DatasetsModal","datasets","currentDataset","defaultValue","direction","colorScheme","mr","AggregateAttributes","values","DataSource","useDisclosure","onOpen","DataTable","overflow","columnName","row","isDatatableViewSelector","datatableReducer","isDataTableView","VegaSpecificationCreator","dataSpecification","mark","autosize","this","encodings","encode","getEncodingChannels","toSpec","fieldsMapping","filter","field","forEach","channelName","includes","loadEncodingChannelWithAggregateId","loadEncodingChannel","channel","push","VegaCharts","data","encodingFields","specificationCreator","loadEncodingChannels","justify","VegaLite","spec","getVegaSpecification","table","isNoEncodedChannels","vegaEncodingSelector","encodingFieldsSelector","vegaEncoding","marksFieldsSelector","fieldsAndTheirTypesSelector","marksFields","mergeRight","Charts","encodingFieldsAndTheirTypes","WorkingSpace","Footer","justifyContent","alignItems","width","height","Dropzone","acceptedItemTypeKeys","onDrop","onDragColor","isOverColor","useDrop","accept","drop","isOver","canDrop","bgColor","minHeight","Field","label","fontWeight","FieldsColumn","fields","ChartConfig","setField","MainView","gridTemplateRows","templateColumns","gridGap","gridColumn","App","theme","DndProvider","backend","HTML5Backend","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.667fc8b9.chunk.js","sourcesContent":["export const SET_COLUMNS = 'sourceData/SET_COLUMNS';\nexport const ADD_COLUMN_TO_VISIBLE_COLUMNS_NAMES = 'sourceData/ADD_COLUMN_TO_VISIBLE_COLUMNS_NAMES';\nexport const REMOVE_COLUMN_FROM_VISIBLE_COLUMNS_NAMES = 'sourceData/REMOVE_COLUMN_FROM_VISIBLE_COLUMNS_NAMES';\nexport const SET_RECOMMENDED_DATATYPES_TO_COLUMNS = 'sourceData/SET_RECOMMENDED_DATATYPES_TO_COLUMNS';\n\nexport const SET_ROWS = 'sourceData/SET_ROWS';\n\nexport const GET_JSON_DATA_REQUEST = 'sourceData/GET_JSON_DATA_REQUEST';\n\nexport const SET_ATTRIBUTE_TYPE = 'sureceData/SET_ATTRIBUTE_TYPE';\n\nexport const FILE_PATHS = [\n    {\n        name: 'Antibiotics dataset from 50\\'s ',\n        path: '/antibiotics.json'\n    },\n    {\n        name: 'Movies dataset',\n        path: '/movies.json'\n    },\n    {\n        name: 'Cars statistics from 1970 to 1982',\n        path: '/cars.json'\n    }\n];\n","import * as vl from 'vega-lite-api';\n\nexport const SET_FIELD = 'vegaEncoding/SET_FIELD';\nexport const ENCODING_FIELDS = {\n    X: 'X',\n    Y: 'Y',\n    ROW: 'ROW',\n    COLUMN: 'COLUMN'\n};\n\nexport const MARKS_FIELDS = {\n    SIZE: 'SIZE',\n    COLOR: 'COLOR',\n    SHAPE: 'SHAPE',\n    DETAIL: 'DETAIL',\n    TEXT: 'TEXT'\n};\n\nexport const VEGA_DATA_TYPES = {\n    NOMINAL: 'nominal',\n    ORDINAL: 'ordinal',\n    QUANTITATIVE: 'quantitative',\n    TEMPORAL: 'temporal'\n};\n\nexport const FIELDS_TYPES = {\n    ENCODING: 'encodingFields',\n    MARKS: 'marks'\n};\n\nexport const AGGREGATE_ATTRIBUTES_TYPES = {\n    COUNT: 'count'\n};\n\nexport const AGGREGATE_ATTRIBUTES_MAPPING = {\n    [AGGREGATE_ATTRIBUTES_TYPES.COUNT]: vl.count(),\n    [AGGREGATE_ATTRIBUTES_TYPES.AVERAGE]: vl.average()\n};\n\nexport const ENCODING_FIELDS_TO_CHANNEL_MAPPING = {\n    [ENCODING_FIELDS.X]: vl.x(),\n    [ENCODING_FIELDS.Y]: vl.y(),\n    [ENCODING_FIELDS.ROW]: vl.row(),\n    [ENCODING_FIELDS.COLUMN]: vl.column(),\n    [MARKS_FIELDS.SIZE]: vl.size(),\n    [MARKS_FIELDS.COLOR]: vl.color(),\n    [MARKS_FIELDS.SHAPE]: vl.shape(),\n    [MARKS_FIELDS.DETAIL]: vl.detail(),\n    [MARKS_FIELDS.TEXT]: vl.text()\n};\n","import {\n    ADD_COLUMN_TO_VISIBLE_COLUMNS_NAMES,\n    GET_JSON_DATA_REQUEST,\n    REMOVE_COLUMN_FROM_VISIBLE_COLUMNS_NAMES, SET_ATTRIBUTE_TYPE,\n    SET_COLUMNS, SET_RECOMMENDED_DATATYPES_TO_COLUMNS,\n    SET_ROWS\n} from './const';\n\nexport const setColumns = (columnsNames) => ({\n    type: SET_COLUMNS,\n    columnsNames\n});\n\nexport const addColumnToVisibleColumnNames = (columnName) => ({\n    type: ADD_COLUMN_TO_VISIBLE_COLUMNS_NAMES,\n    columnName\n});\n\nexport const removeColumnFromVisibleColumnNames = (columnName) => ({\n    type: REMOVE_COLUMN_FROM_VISIBLE_COLUMNS_NAMES,\n    columnName\n});\n\nexport const setRows = (rows) => ({\n    type: SET_ROWS,\n    rows\n});\n\nexport const getJsonDataRequest = (url) => ({\n    type: GET_JSON_DATA_REQUEST,\n    url\n});\n\nexport const setAttributeType = (attributeId, newType) => ({\n    type: SET_ATTRIBUTE_TYPE,\n    attributeId,\n    newType\n});\n\nexport const setRecommendedDatatypesToColumns = () => ({\n    type: SET_RECOMMENDED_DATATYPES_TO_COLUMNS\n});\n","import { combineEpics, ofType } from 'redux-observable';\nimport {\n    catchError,\n    map,\n    switchMap,\n    mapTo\n} from 'rxjs/operators';\nimport { fromFetch } from 'rxjs/fetch';\nimport { from } from 'rxjs';\nimport {\n    GET_JSON_DATA_REQUEST, SET_COLUMNS, SET_ROWS\n} from './const';\nimport { fetchColumnsAndRowsFromJSON } from './utils';\nimport { setColumns, setRecommendedDatatypesToColumns, setRows } from './actions';\n\nconst fetchJSONDataEpic = (action$) => action$.pipe(\n    ofType(GET_JSON_DATA_REQUEST),\n    switchMap(({ url }) => fromFetch(url, {\n        selector: (response) => response.json()\n    })),\n    map((json) => fetchColumnsAndRowsFromJSON(json)),\n    switchMap(({ rows, columns }) => from([\n        setColumns(columns),\n        setRows(rows)\n    ])),\n    catchError((e) => console.log(e))\n);\n\nconst fetchRecommendedDatatypesToColumnsEpic = (action$) => action$.pipe(\n    ofType(SET_COLUMNS, SET_ROWS),\n    mapTo(setRecommendedDatatypesToColumns())\n);\n\nexport const datatableEpics = combineEpics(\n    fetchJSONDataEpic,\n    fetchRecommendedDatatypesToColumnsEpic\n);\n","import { isNil } from 'ramda';\nimport { VEGA_DATA_TYPES } from '../vegaEncoding/const';\n\nexport const fetchColumnsAndRowsFromJSON = (json) => {\n    if (isNil(json) || json.length === 0 || json[0].length === 0) {\n        return { columns: [], rows: [] };\n    }\n\n    return {\n        columns: Object.keys(json[0]),\n        rows: json\n    };\n};\n\nexport const getRecommendedDatatype = (value) => {\n    if (Number(value)) {\n        return VEGA_DATA_TYPES.QUANTITATIVE;\n    }\n    if (!Number.isNaN(Date.parse(value))) {\n        return VEGA_DATA_TYPES.TEMPORAL;\n    }\n    return VEGA_DATA_TYPES.NOMINAL;\n};\n","import { combineEpics } from 'redux-observable';\nimport { datatableEpics } from './redux/sourceData/epics';\n\nexport const rootEpic = combineEpics(\n    datatableEpics\n);\n","import { createEpicMiddleware } from 'redux-observable';\nimport { configureStore } from '@reduxjs/toolkit';\nimport { rootEpic } from './rootEpic';\n\nexport const configureAppStore = (reducer) => {\n    const epicMiddleware = createEpicMiddleware();\n\n    const store = configureStore({\n        reducer,\n        middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(epicMiddleware)\n    });\n    epicMiddleware.run(rootEpic);\n\n    return store;\n};\n\n","import { createReducer } from '@reduxjs/toolkit';\nimport { defaultTo, mapObjIndexed } from 'ramda';\nimport {\n    GET_JSON_DATA_REQUEST,\n    SET_ATTRIBUTE_TYPE,\n    SET_COLUMNS, SET_RECOMMENDED_DATATYPES_TO_COLUMNS,\n    SET_ROWS\n} from './const';\nimport { VEGA_DATA_TYPES } from '../vegaEncoding/const';\nimport { getRecommendedDatatype } from './utils';\n\nexport const sourceDataInitialState = {\n    currentDatasetPath: '',\n    attributes: [],\n    attributesTypes: {},\n    rows: []\n};\n\nexport const SOURCE_DATA_REDUCER_NAME = 'sourceDataReducer';\nexport const sourceDataReducer = createReducer(sourceDataInitialState, (builder) => {\n    builder\n        .addCase(GET_JSON_DATA_REQUEST, (state, { url }) => {\n            state.currentDatasetPath = url;\n        })\n        .addCase(SET_COLUMNS, (state, { columnsNames }) => {\n            state.attributes = columnsNames;\n            state.attributesTypes = columnsNames.reduce((acc, name) => ({\n                ...acc,\n                [name]: VEGA_DATA_TYPES.NOMINAL\n            }), {});\n        })\n        .addCase(SET_ROWS, (state, { rows }) => {\n            state.rows = rows;\n        })\n        .addCase(SET_RECOMMENDED_DATATYPES_TO_COLUMNS, (state) => {\n            state.attributesTypes = mapObjIndexed((_, id) => getRecommendedDatatype(defaultTo({}, state.rows[0])[id]), state.attributesTypes);\n        })\n        .addCase(SET_ATTRIBUTE_TYPE, (state, { attributeId, newType }) => {\n            state.attributesTypes[attributeId] = newType;\n        });\n});\n","export const TOGGLE_VIEW = 'config/TOGGLE_VIEW';\n","import { createReducer } from '@reduxjs/toolkit';\nimport {\n    TOGGLE_VIEW\n} from './const';\n\nconst initialState = {\n    dataTableView: false\n};\n\nexport const WORKING_SPACE_REDUCER_NAME = 'workingSpaceReducer';\nexport const workingSpaceReducer = createReducer(initialState, (builder) => {\n    builder\n        .addCase(TOGGLE_VIEW, (state) => {\n            state.dataTableView = !state.dataTableView;\n        });\n});\n","import { createReducer } from '@reduxjs/toolkit';\nimport {\n    ENCODING_FIELDS, FIELDS_TYPES, MARKS_FIELDS, SET_FIELD\n} from './const';\n\nconst initialState = {\n    [FIELDS_TYPES.ENCODING]: {\n        [ENCODING_FIELDS.X]: null,\n        [ENCODING_FIELDS.Y]: null,\n        [ENCODING_FIELDS.COLUMN]: null,\n        [ENCODING_FIELDS.ROW]: null\n    },\n    [FIELDS_TYPES.MARKS]: {\n        [MARKS_FIELDS.SIZE]: null,\n        [MARKS_FIELDS.COLOR]: null,\n        [MARKS_FIELDS.SHAPE]: null,\n        [MARKS_FIELDS.DETAIL]: null,\n        [MARKS_FIELDS.TEXT]: null\n    }\n\n};\n\nexport const VEGA_ENCODING_REDUCER_NAME = 'vegaEncodingReducer';\nexport const vegaEncodingReducer = createReducer(initialState, (builder) => {\n    builder\n        .addCase(SET_FIELD, (state, { fieldType, fieldId, attributeId }) => {\n            state[fieldType][fieldId] = attributeId;\n        });\n});\n","import { combineReducers } from 'redux';\nimport { sourceDataReducer, SOURCE_DATA_REDUCER_NAME } from './redux/sourceData/reducer';\nimport { WORKING_SPACE_REDUCER_NAME, workingSpaceReducer } from './containers/WorkingSpace/reducer';\nimport { VEGA_ENCODING_REDUCER_NAME, vegaEncodingReducer } from './redux/vegaEncoding/reducer';\n\nexport const rootReducer = combineReducers({\n    [SOURCE_DATA_REDUCER_NAME]: sourceDataReducer,\n    [VEGA_ENCODING_REDUCER_NAME]: vegaEncodingReducer,\n    [WORKING_SPACE_REDUCER_NAME]: workingSpaceReducer\n});\n","import React from 'react';\nimport { Heading } from '@chakra-ui/react';\n\nexport const Header = () => (\n    <Heading as=\"h1\" size=\"2xl\">\n        Exploratory Data Analysis\n    </Heading>\n);\n","import { createSelector } from '@reduxjs/toolkit';\nimport { pipe } from 'ramda';\nimport { SOURCE_DATA_REDUCER_NAME } from './reducer';\n\nexport const sourceDataSelector = (state) => state[SOURCE_DATA_REDUCER_NAME];\n\nexport const currentDatasetPathSelector = createSelector(\n    sourceDataSelector,\n    (sourceDataReducer) => sourceDataReducer.currentDatasetPath\n);\n\nexport const attributesSelector = createSelector(\n    sourceDataSelector,\n    (sourceDataReducer) => sourceDataReducer.attributes\n);\n\nexport const rowsSelector = createSelector(\n    sourceDataSelector,\n    // Without deepcloning the error occurs on the vega component\n    (sourceDataReducer) => pipe(JSON.stringify, JSON.parse)(sourceDataReducer.rows)\n);\n\nexport const attributesTypesSelector = createSelector(\n    sourceDataSelector,\n    (sourceDataReducer) => sourceDataReducer.attributesTypes\n);\n\nexport const attributesEntries = createSelector(\n    sourceDataSelector,\n    (sourceDataReducer) => Object.entries(sourceDataReducer.attributesTypes)\n);\n","export const DnDItemTypes = {\n    ATTRIBUTE: 'attribute'\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { HStack, Text } from '@chakra-ui/react';\nimport { useDrag } from 'react-dnd';\n\nexport const DraggableTag = ({\n    tagId,\n    children,\n    icon,\n    color,\n    draggingColor,\n    textColor,\n    itemTypeKey,\n    onDropOutsideDropzone,\n    grow\n}) => {\n    const [{ isDragging }, drag] = useDrag(() => ({\n        type: itemTypeKey,\n        item: { tagId },\n        collect: (monitor) => ({\n            isDragging: !!monitor.isDragging()\n        }),\n        end: (item, monitor) => {\n            const { tagId } = item;\n            const didDrop = monitor.didDrop();\n            if (!didDrop) {\n                onDropOutsideDropzone(tagId);\n            }\n        }\n    }), [tagId, itemTypeKey]);\n\n    return (\n        <HStack\n            ref={drag}\n            key={tagId}\n            py={1}\n            px={2}\n            borderRadius=\"lg\"\n            shadow=\"lg\"\n            borderWidth={1}\n            bg={isDragging ? draggingColor : color}\n            flexGrow={grow ? 1 : 0}\n            spacing={2}\n        >\n            {icon}\n            <Text\n                fontSize=\"sm\"\n                color={textColor}\n            >\n                {children}\n            </Text>\n        </HStack>\n    );\n};\n\nDraggableTag.propTypes = {\n    tagId: PropTypes.string.isRequired,\n    children: PropTypes.node.isRequired,\n    icon: PropTypes.element,\n    color: PropTypes.string,\n    draggingColor: PropTypes.string,\n    itemTypeKey: PropTypes.string.isRequired,\n    onDropOutsideDropzone: PropTypes.func,\n    textColor: PropTypes.string,\n    grow: PropTypes.bool\n};\n\nDraggableTag.defaultProps = {\n    icon: null,\n    color: 'white',\n    draggingColor: 'cyan.100',\n    textColor: 'black',\n    onDropOutsideDropzone: () => {},\n    grow: false\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    IconButton,\n    Popover,\n    PopoverArrow, PopoverBody,\n    PopoverCloseButton,\n    PopoverContent,\n    PopoverHeader,\n    PopoverTrigger, Radio, RadioGroup, VStack\n} from '@chakra-ui/react';\nimport {\n    BsHash, BsSortAlphaDown, BsSortNumericDown\n} from 'react-icons/bs';\nimport { TimeIcon } from '@chakra-ui/icons';\nimport { VEGA_DATA_TYPES } from '../../../../../redux/vegaEncoding/const';\n\nexport const FieldPopover = ({ value, onChange }) => {\n    const [isOpen, setIsOpen] = React.useState(false);\n    const open = () => setIsOpen(!isOpen);\n    const close = () => setIsOpen(false);\n\n    const getIcon = (type) => {\n        switch (type) {\n            case VEGA_DATA_TYPES.TEMPORAL:\n                return <TimeIcon />;\n            case VEGA_DATA_TYPES.QUANTITATIVE:\n                return <BsSortNumericDown size=\"1.5em\" />;\n            case VEGA_DATA_TYPES.ORDINAL:\n                return <BsSortAlphaDown size=\"1.5em\" />;\n            case VEGA_DATA_TYPES.NOMINAL:\n            default:\n                return <BsHash size=\"1.5em\" />;\n        }\n    };\n    return (\n        <Popover\n            variant=\"responsive\"\n            isOpen={isOpen}\n            onClose={close}\n            autoFocus={false}\n            returnFocusOnClose={false}\n        >\n            <PopoverTrigger>\n                <IconButton\n                    aria-label=\"Choose type of field\"\n                    icon={getIcon(value)}\n                    size=\"xs\"\n                    background=\"white\"\n                    onClick={() => open()}\n                />\n            </PopoverTrigger>\n            <PopoverContent style={!isOpen && ({ display: 'none' })}>\n                <PopoverArrow />\n                <PopoverCloseButton />\n                <PopoverHeader>Choose Vega data type</PopoverHeader>\n                <PopoverBody>\n                    <RadioGroup onChange={onChange} value={value}>\n                        <VStack align=\"start\">\n                            <Radio value={VEGA_DATA_TYPES.QUANTITATIVE}>Quantitative</Radio>\n                            <Radio value={VEGA_DATA_TYPES.ORDINAL}>Ordinal</Radio>\n                            <Radio value={VEGA_DATA_TYPES.NOMINAL}>Nominal</Radio>\n                            <Radio value={VEGA_DATA_TYPES.TEMPORAL}>Temporal</Radio>\n                        </VStack>\n                    </RadioGroup>\n                </PopoverBody>\n            </PopoverContent>\n        </Popover>\n    );\n};\n\nFieldPopover.propTypes = {\n    value: PropTypes.oneOf(Object.values(VEGA_DATA_TYPES)).isRequired,\n    onChange: PropTypes.func.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { DnDItemTypes } from '../../../../../DnD';\nimport { DraggableTag } from '../../../../../components/DnD/DraggableTag';\nimport { FieldPopover } from './FieldPopover';\nimport { VEGA_DATA_TYPES } from '../../../../../redux/vegaEncoding/const';\n\nexport const Attribute = ({\n    name,\n    fieldType,\n    onChange\n}) => (\n    <DraggableTag\n        tagId={name}\n        itemTypeKey={DnDItemTypes.ATTRIBUTE}\n        icon={(\n            <FieldPopover\n                value={fieldType}\n                onChange={onChange}\n            />\n        )}\n    >\n        {name}\n    </DraggableTag>\n);\n\nAttribute.propTypes = {\n    name: PropTypes.string.isRequired,\n    fieldType: PropTypes.oneOf(Object.values(VEGA_DATA_TYPES)).isRequired,\n    onChange: PropTypes.func.isRequired\n};\n","import React from 'react';\nimport { Stack, Text } from '@chakra-ui/react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { attributesEntries } from '../../../../redux/sourceData/selectors';\nimport { Attribute } from './components/Attribute';\nimport { setAttributeType } from '../../../../redux/sourceData/actions';\n\nexport const Attributes = () => {\n    const attributesTypes = useSelector(attributesEntries);\n    const dispatch = useDispatch();\n\n    return (\n        <Stack w=\"full\" h=\"full\" p={2} bg=\"gray.50\" borderRadius=\"lg\">\n            {\n                attributesTypes.length === 0 ? (\n                    <Text\n                        fontSize=\"sm\"\n                        color=\"gray.500\"\n                        textAlign=\"center\"\n                    >\n                        Load some dataset first\n                    </Text>\n                ) : attributesTypes.map(([id, datatype]) => (\n                    <Attribute\n                        key={id}\n                        name={id}\n                        fieldType={datatype}\n                        onChange={(newDatatype) => dispatch(setAttributeType(id, newDatatype))}\n                    />\n                ))\n            }\n        </Stack>\n    );\n};\n","import React from 'react';\nimport {\n    Modal,\n    ModalOverlay,\n    ModalContent,\n    ModalHeader,\n    ModalFooter,\n    ModalBody,\n    ModalCloseButton,\n    Button, RadioGroup, Stack, Radio\n} from '@chakra-ui/react';\nimport PropTypes from 'prop-types';\n\nexport const DatasetsModal = ({\n    isOpen, onClose, onChange, datasets, currentDataset\n}) => (\n    <Modal isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n            <ModalHeader>Datasets</ModalHeader>\n            <ModalCloseButton />\n            <ModalBody>\n                <RadioGroup onChange={onChange} defaultValue={currentDataset}>\n                    <Stack direction=\"column\">\n                        {\n                            datasets.map(({ name, path }) => (\n                                <Radio key={name} value={path}>{name}</Radio>\n                            ))\n                        }\n                    </Stack>\n                </RadioGroup>\n            </ModalBody>\n            <ModalFooter>\n                <Button colorScheme=\"blue\" mr={3} onClick={onClose}>\n                    Close\n                </Button>\n            </ModalFooter>\n        </ModalContent>\n    </Modal>\n);\n\nDatasetsModal.propTypes = {\n    isOpen: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired,\n    onChange: PropTypes.func,\n    datasets: PropTypes.arrayOf(PropTypes.shape({\n        name: PropTypes.string,\n        path: PropTypes.string\n    })),\n    currentDataset: PropTypes.string\n};\n\nDatasetsModal.defaultProps = {\n    onChange: () => {},\n    datasets: [],\n    currentDataset: ''\n};\n","import React from 'react';\nimport { Stack } from '@chakra-ui/react';\nimport { values } from 'ramda';\nimport { DraggableTag } from '../../../../components/DnD/DraggableTag';\nimport { DnDItemTypes } from '../../../../DnD';\nimport { AGGREGATE_ATTRIBUTES_TYPES } from '../../../../redux/vegaEncoding/const';\n\nexport const AggregateAttributes = () => (\n    <Stack p={2} bg=\"gray.50\" borderRadius=\"lg\">\n        {\n            values(AGGREGATE_ATTRIBUTES_TYPES).map((id) => (\n                <DraggableTag\n                    tagId={id}\n                    itemTypeKey={DnDItemTypes.ATTRIBUTE}\n                >\n                    {id}\n                </DraggableTag>\n            ))\n        }\n    </Stack>\n);\n","import React from 'react';\nimport { Button, Stack, useDisclosure } from '@chakra-ui/react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Attributes } from './containers/Attributes';\nimport { toggleView } from '../WorkingSpace/actions';\nimport { DatasetsModal } from './components/DatasetsModal';\nimport { FILE_PATHS } from '../../redux/sourceData/const';\nimport { getJsonDataRequest } from '../../redux/sourceData/actions';\nimport { currentDatasetPathSelector } from '../../redux/sourceData/selectors';\nimport { AggregateAttributes } from './containers/AggregateAttributes';\n\nexport const DataSource = () => {\n    const dispatch = useDispatch();\n    const { isOpen, onOpen, onClose } = useDisclosure();\n    const currentDatasetPath = useSelector(currentDatasetPathSelector);\n\n    return (\n        <Stack w=\"full\" h=\"full\" p={2}>\n            <Button onClick={() => dispatch(toggleView())} colorScheme=\"teal\">\n                Switch View\n            </Button>\n            <Button onClick={onOpen}>\n                Load dataset\n            </Button>\n            <DatasetsModal\n                isOpen={isOpen}\n                onClose={onClose}\n                onChange={(path) => dispatch(getJsonDataRequest(path))}\n                currentDataset={currentDatasetPath}\n                datasets={FILE_PATHS}\n            />\n            <Attributes />\n            <AggregateAttributes />\n        </Stack>\n    );\n};\n","import { TOGGLE_VIEW } from './const';\n\nexport const toggleView = () => ({\n    type: TOGGLE_VIEW\n});\n","import React from 'react';\nimport {\n    Table,\n    Thead,\n    Tbody,\n    Tr,\n    Th,\n    Td,\n    Flex\n} from '@chakra-ui/react';\nimport { useSelector } from 'react-redux';\nimport {\n    attributesSelector,\n    rowsSelector\n} from '../../../../redux/sourceData/selectors';\n\nexport const DataTable = () => {\n    const columnsNames = useSelector(attributesSelector);\n    const rows = useSelector(rowsSelector);\n    return (\n        <Flex direction=\"column\" overflow=\"auto\">\n            <Table variant=\"striped\">\n                <Thead>\n                    <Tr>\n                        {\n                            (columnsNames.length === 0) ? (\n                                <Th>To show table, please load a dataset</Th>\n                            ) : columnsNames.map((columnName) => <Th key={columnName}>{columnName}</Th>)\n                        }\n                    </Tr>\n                </Thead>\n                <Tbody>\n                    {rows.map((row) => (\n                        <Tr>\n                            {\n                                Object.values(row).map((value) => (\n                                    <Td>{value}</Td>\n                                ))\n                            }\n                        </Tr>\n                    ))}\n                </Tbody>\n            </Table>\n        </Flex>\n    );\n};\n","import { createSelector } from '@reduxjs/toolkit';\nimport { WORKING_SPACE_REDUCER_NAME } from './reducer';\n\nexport const workingSpaceSelector = (state) => state[WORKING_SPACE_REDUCER_NAME];\n\nexport const isDatatableViewSelector = createSelector(\n    workingSpaceSelector,\n    (datatableReducer) => datatableReducer.dataTableView\n);\n\nexport const isChartView = createSelector(\n    isDatatableViewSelector,\n    (isDataTableView) => !isDataTableView\n);\n","import * as vl from 'vega-lite-api';\nimport { isNil } from 'ramda';\nimport { AGGREGATE_ATTRIBUTES_TYPES, ENCODING_FIELDS_TO_CHANNEL_MAPPING } from '../const';\n\nclass VegaSpecificationCreator {\n    constructor(dataSpecification = { name: 'table' }, mark = 'point', autosize = 'pad') {\n        this.dataSpecification = dataSpecification;\n        this.autosize = autosize;\n        this.mark = mark;\n\n        this.encodings = [];\n    }\n\n    getVegaSpecification() {\n        return vl\n            .data(this.dataSpecification)\n            .mark(this.mark)\n            .encode(...this.getEncodingChannels())\n            .autosize(this.autosize)\n            .toSpec();\n    }\n\n    getEncodingChannels() {\n        if (this.encodings.length === 0) {\n            return [{}];\n        }\n        return this.encodings;\n    }\n\n    isNoEncodedChannels() {\n        return this.encodings.length === 0;\n    }\n\n    loadEncodingChannels(fieldsMapping) {\n        const notNullEncodingChannels = Object.entries(fieldsMapping)\n            .filter(([, field]) => !isNil(field?.id));\n\n        notNullEncodingChannels.forEach(([channelName, { id, type }]) => {\n            if (Object.values(AGGREGATE_ATTRIBUTES_TYPES).includes(id)) {\n                this.loadEncodingChannelWithAggregateId(id, ENCODING_FIELDS_TO_CHANNEL_MAPPING[channelName]);\n            }\n            else {\n                this.loadEncodingChannel(id, type, ENCODING_FIELDS_TO_CHANNEL_MAPPING[channelName]);\n            }\n        });\n    }\n\n    loadEncodingChannelWithAggregateId(id, channel) {\n        this.encodings.push(channel[id]());\n    }\n\n    loadEncodingChannel(id, type, channel) {\n        this.encodings.push(channel.field(id).type(type));\n    }\n}\n\nexport default VegaSpecificationCreator;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Flex } from '@chakra-ui/react';\nimport { VegaLite } from 'react-vega';\nimport { VEGA_DATA_TYPES } from '../../redux/vegaEncoding/const';\nimport VegaSpecificationCreator from '../../redux/vegaEncoding/vegaSpecificationCreator/VegaSpecificationCreator';\n\nexport const VegaCharts = ({\n    data, encodingFields\n}) => {\n    const specificationCreator = new VegaSpecificationCreator(\n        { name: 'table' },\n        'circle',\n        'pad'\n    );\n\n    specificationCreator.loadEncodingChannels(encodingFields);\n\n    return (\n        <Flex direction=\"column\" overflow=\"auto\" justify=\"center\" grow={1}>\n            <VegaLite\n                spec={specificationCreator.getVegaSpecification()}\n                data={{ table: specificationCreator.isNoEncodedChannels() ? [] : data }}\n            />\n        </Flex>\n    );\n};\n\nconst fieldShape = {\n    id: PropTypes.string,\n    type: PropTypes.oneOf(Object.values(VEGA_DATA_TYPES))\n};\n\nVegaCharts.propTypes = {\n    data: PropTypes.array,\n    encodingFields: PropTypes.shape(fieldShape)\n};\n\nVegaCharts.defaultProps = {\n    data: [{}],\n    encodingFields: {}\n};\n","import { createSelector } from '@reduxjs/toolkit';\nimport {\n    isNil, map, mergeRight\n} from 'ramda';\nimport { VEGA_ENCODING_REDUCER_NAME } from './reducer';\nimport { FIELDS_TYPES } from './const';\nimport { attributesTypesSelector } from '../sourceData/selectors';\n\nexport const vegaEncodingSelector = (state) => state[VEGA_ENCODING_REDUCER_NAME];\n\nexport const encodingFieldsSelector = createSelector(\n    vegaEncodingSelector,\n    (vegaEncoding) => vegaEncoding[FIELDS_TYPES.ENCODING]\n);\n\nexport const marksFieldsSelector = createSelector(\n    vegaEncodingSelector,\n    (vegaEncoding) => vegaEncoding[FIELDS_TYPES.MARKS]\n);\n\nexport const fieldsAndTheirTypesSelector = createSelector(\n    encodingFieldsSelector,\n    marksFieldsSelector,\n    attributesTypesSelector,\n    (encodingFields, marksFields, attributesTypes) => map((id) => {\n        if (isNil(id)) {\n            return null;\n        }\n        return ({\n            id,\n            type: attributesTypes[id]\n        });\n    }, mergeRight(encodingFields, marksFields))\n);\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { VegaCharts } from '../../../../components/VegaCharts';\nimport { rowsSelector } from '../../../../redux/sourceData/selectors';\nimport { fieldsAndTheirTypesSelector } from '../../../../redux/vegaEncoding/selectors';\n\nexport const Charts = () => {\n    const rows = useSelector(rowsSelector);\n    const encodingFieldsAndTheirTypes = useSelector(fieldsAndTheirTypesSelector);\n\n    return (\n        <VegaCharts\n            data={rows}\n            encodingFields={encodingFieldsAndTheirTypes}\n        />\n    );\n};\n","import React from 'react';\nimport { Flex } from '@chakra-ui/react';\nimport { useSelector } from 'react-redux';\nimport { DataTable } from './containers/DataTable';\nimport { isDatatableViewSelector } from './selectors';\nimport { Charts } from './containers/Charts';\n\nexport const WorkingSpace = () => {\n    const isDataTableView = useSelector(isDatatableViewSelector);\n\n    return (\n        <Flex direction=\"column\" overflow=\"auto\">\n            {\n                isDataTableView ? <DataTable /> : <Charts />\n            }\n        </Flex>\n    );\n};\n","import React from 'react';\nimport {\n    Box, Flex, Text\n} from '@chakra-ui/react';\n\nexport const Footer = () => (\n    <Flex\n        justifyContent=\"center\"\n        alignItems=\"end\"\n        width=\"100%\"\n        height=\"100%\"\n    >\n        <Box>\n            <Text fontSize=\"md\">\n                Jan Piotrowski 2021\n            </Text>\n        </Box>\n    </Flex>\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Box } from '@chakra-ui/react';\nimport { useDrop } from 'react-dnd';\n\nexport const Dropzone = ({\n    children,\n    acceptedItemTypeKeys,\n    onDrop,\n    color,\n    onDragColor,\n    isOverColor\n}) => {\n    const [{ isOver, canDrop }, drop] = useDrop(\n        () => ({\n            accept: acceptedItemTypeKeys,\n            drop: onDrop,\n            collect: (monitor) => ({\n                isOver: !!monitor.isOver(),\n                canDrop: !!monitor.canDrop()\n            })\n        })\n    );\n\n    const boxColor = () => {\n        if (canDrop && isOver) {\n            return isOverColor;\n        }\n        if (canDrop && !isOver) {\n            return onDragColor;\n        }\n        return color;\n    };\n\n    return (\n        <Box\n            display=\"flex\"\n            ref={drop}\n            bgColor={boxColor}\n            w=\"100%\"\n            p={1}\n            borderRadius=\"lg\"\n            minHeight={10}\n            alignItems=\"center\"\n        >\n            {children}\n        </Box>\n\n    );\n};\n\nDropzone.propTypes = {\n    children: PropTypes.node,\n    acceptedItemTypeKeys: PropTypes.arrayOf(PropTypes.string).isRequired,\n    onDrop: PropTypes.func,\n    color: PropTypes.string,\n    onDragColor: PropTypes.string,\n    isOverColor: PropTypes.string\n};\n\nDropzone.defaultProps = {\n    children: null,\n    onDrop: () => {},\n    color: 'gray.50',\n    onDragColor: 'green.100',\n    isOverColor: 'green.300'\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Box, Text } from '@chakra-ui/react';\nimport { isNil } from 'ramda';\nimport { Dropzone } from '../../../components/DnD/DropZone';\nimport { DnDItemTypes } from '../../../DnD';\nimport { DraggableTag } from '../../../components/DnD/DraggableTag';\n\nexport const Field = ({\n    fieldId, label, value, onDrop\n}) => (\n    <Box p={1} key={fieldId}>\n        <Text fontSize=\"sm\" fontWeight={600}>{label}</Text>\n        <Dropzone\n            acceptedItemTypeKeys={[DnDItemTypes.ATTRIBUTE]}\n            onDrop={({ tagId }) => onDrop(fieldId, tagId)}\n        >\n            {isNil(value) ? (\n                <Text\n                    fontSize=\"xs\"\n                    color=\"gray.500\"\n                >\n                    Drop attribute here\n                </Text>\n            ) : (\n                <DraggableTag\n                    itemTypeKey={DnDItemTypes.ATTRIBUTE}\n                    tagId={value}\n                    grow\n                    onDropOutsideDropzone={() => onDrop(fieldId, null)}\n                >\n                    {value}\n                </DraggableTag>\n            )}\n        </Dropzone>\n    </Box>\n);\n\nField.propTypes = {\n    fieldId: PropTypes.string.isRequired,\n    label: PropTypes.string.isRequired,\n    value: PropTypes.string,\n    onDrop: PropTypes.func.isRequired\n};\n\nField.defaultProps = {\n    value: null\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Box, Text } from '@chakra-ui/react';\nimport { Field } from './Field';\n\nexport const FieldsColumn = ({ fields, onDrop, label }) => (\n    <Box p={3} borderWidth=\"1px\" borderRadius=\"lg\">\n        <Text fontSize=\"lg\" fontWeight={600}>{label}</Text>\n        {\n            fields.map(({ id, label, value }) => (\n                <Field key={id} fieldId={id} label={label} value={value} onDrop={onDrop} />\n            ))\n        }\n    </Box>\n\n);\n\nFieldsColumn.propTypes = {\n    fields: PropTypes.arrayOf(PropTypes.object).isRequired,\n    onDrop: PropTypes.func.isRequired,\n    label: PropTypes.string.isRequired\n};\n","import React from 'react';\nimport { Stack } from '@chakra-ui/react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setField } from '../../redux/vegaEncoding/actions';\nimport { ENCODING_FIELDS, FIELDS_TYPES, MARKS_FIELDS } from '../../redux/vegaEncoding/const';\nimport { FieldsColumn } from './components/FieldsColumn';\nimport {\n    encodingFieldsSelector, marksFieldsSelector\n} from '../../redux/vegaEncoding/selectors';\n\nexport const ChartConfig = () => {\n    const dispatch = useDispatch();\n    const encodingFields = useSelector(encodingFieldsSelector);\n    const marksFields = useSelector(marksFieldsSelector);\n    const columns = [\n        {\n            id: FIELDS_TYPES.ENCODING,\n            label: 'Encoding',\n            fields: [\n                { id: ENCODING_FIELDS.X, label: 'X field', value: encodingFields[ENCODING_FIELDS.X] },\n                { id: ENCODING_FIELDS.Y, label: 'Y field', value: encodingFields[ENCODING_FIELDS.Y] },\n                { id: ENCODING_FIELDS.ROW, label: 'Row', value: encodingFields[ENCODING_FIELDS.ROW] },\n                { id: ENCODING_FIELDS.COLUMN, label: 'Column', value: encodingFields[ENCODING_FIELDS.COLUMN] }\n            ]\n        },\n        {\n            id: FIELDS_TYPES.MARKS,\n            label: 'Marks',\n            fields: [{ id: MARKS_FIELDS.SIZE, label: 'Size', value: marksFields[MARKS_FIELDS.SIZE] },\n                { id: MARKS_FIELDS.COLOR, label: 'Color', value: marksFields[MARKS_FIELDS.COLOR] },\n                { id: MARKS_FIELDS.SHAPE, label: 'Shape', value: marksFields[MARKS_FIELDS.SHAPE] }]\n        }\n    ];\n\n    return (\n        <Stack w=\"full\" h=\"full\" p={2}>\n            {\n                columns.map(({ id, fields, label }) => (\n                    <FieldsColumn\n                        key={label}\n                        onDrop={(fieldId, tagId) => dispatch(setField(id, fieldId, tagId))}\n                        fields={fields}\n                        label={label}\n                    />\n                ))\n            }\n        </Stack>\n    );\n};\n\n","import { SET_FIELD } from './const';\n\nexport const setField = (fieldType, fieldId, attributeId) => ({\n    type: SET_FIELD,\n    fieldType,\n    fieldId,\n    attributeId\n});\n","import React from 'react';\nimport { Flex, Grid, GridItem } from '@chakra-ui/react';\nimport { Header } from '../Header';\nimport { DataSource } from '../DataSource';\nimport { WorkingSpace } from '../WorkingSpace';\nimport { Footer } from '../Footer';\nimport { ChartConfig } from '../ChartConfig';\n\nexport const MainView = () => (\n    <Flex h=\"100vh\" p={6}>\n        <Grid\n            gridTemplateRows=\"100px 1fr 50px\"\n            templateColumns=\"200px 200px 1fr\"\n            gridGap={1}\n            width=\"100%\"\n        >\n            <GridItem gridColumn=\"1 / 4\">\n                <Header />\n            </GridItem>\n            <DataSource />\n            <ChartConfig />\n            <WorkingSpace />\n            <GridItem gridColumn=\"1 / 4\">\n                <Footer />\n            </GridItem>\n        </Grid>\n    </Flex>\n);\n","import React from 'react';\nimport {\n    ChakraProvider, theme\n} from '@chakra-ui/react';\nimport { Provider } from 'react-redux';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport { configureAppStore } from './configureStore';\nimport { rootReducer } from './rootReducer';\nimport { MainView } from './containers/MainView/MainView';\n\nconst App = () => (\n    <Provider store={configureAppStore(rootReducer)}>\n        <ChakraProvider theme={theme}>\n            <DndProvider backend={HTML5Backend}>\n                <MainView />\n            </DndProvider>\n        </ChakraProvider>\n    </Provider>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}